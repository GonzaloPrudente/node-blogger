#!/usr/bin/env node


/*
   This file contains the program that compiles all markdown files to html files
   bin
*/



var config = require('../config'),
    markdown = require('markdown').markdown,
    ejs = require('ejs'),
    fs = require('fs'),
    postsArray = getPostsArray(),
    getMonth = ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];   




/*
   This function reads ./posts.json (which contains all post entries) and returns the contents in JSON format
   
   @returns: JSON
*/
function getPostsArray() {
    var postsTxt, posts;
    
    postsTxt = fs.readFileSync('./posts.json', 'utf8');
    posts = JSON.parse(postsTxt);
    
    return posts;
}   



    
/*
    This function converts the contents of a Markdown file to html
    
    @param: (String) filename - name of a markdown file
    @returns: html
*/
function mdToHtml (filename) {
    "use strict";
    
    var contents = fs.readFileSync(filename, 'utf8'),
        html = markdown.toHTML(contents);
    
    return html; 
}




/*
    This function returns the object of a single post
    
    @param: (String) filename - name of a post
    @returns: (Object) Post or (Boolean) false
*/
function getPostObject (filename) {
    "use strict";
    
    var i;   

    for (i = 0; i < postsArray.length; i++) {
        if (postsArray[i].filename === filename) {
            return postsArray[i];
        }
    }
    
    return false;
}




/*
    This function compiles an ejs template to html
    
    @param: (String) filename - name of a post
    @returns: (Object) Post or (Boolean) false
*/
function compileTemplate(template, data) {
    "use strict";
    
    var ejsTemplate, compiledHtml;
    
    ejsTemplate = fs.readFileSync('./template/' + template, 'utf8');
    compiledHtml = ejs.render(ejsTemplate, data);
    
    return compiledHtml;
}





/*
    This function generates the html of a single post
    
    @param: (String) filename - name of a post
    @returns: html
*/
function createPost(filename) {
    "use strict";
    
    var postObject, postHtmlContent, data, html;
    
    postObject = getPostObject(filename);
    
    if (!postObject) {
       return false;
    }
    
    postHtmlContent = mdToHtml('./posts/' + filename + '.md');

    if (!postHtmlContent) {
        return false;
    }    
    
    data = {
        blog: {
            title: config.blog.name + ' - ' + postObject.title,
            baseUrl: config.blog.baseUrl,
            description: config.blog.description
        },
        
        author: {
            autobio: config.author.autobio,
            email: config.author.email,
            website: config.author.website,
            name: config.author.name,
            rss: config.author.rss,
            googlePage: config.author.googlePage,
            facbookPage: config.author.facbookPage,
            twitterHandle: config.author.twitterHandle,
            avatar: config.author.avatar
        },
        
        post: {
            title:  postObject.title,
            year: postObject.year,
            month: getMonth[postObject.month],
            day: postObject.day,
            content: postHtmlContent
        }
    };
    
    html = compileTemplate('post.ejs', data);
    
    return html;  
}




/*
    This function generates html links for all posts and return them in an unordered list
    
    @returns: <ul> html
*/
function createLinks() {
    "use strict";
    
    var links = '<ul class="allposts">', 
        posts;
    
    // let's clone the posts array
    posts = postsArray.slice(0);
    
    // let's get new posts first
    posts.reverse();
    
    posts.forEach(function (post) {
        links += '<li>' + (post.day > 9 ? post.day : '0' + post.day) + ' ' + getMonth[post.month] + ' ' + post.year + ' ';
        links += '<a href="' + post.url + '">' + post.title + '</a>' + '</li>';         
    });
    
    links += '</ul>';

    return links;
};




/*
    This function generates the html for the home page

    @returns: html
*/
function createIndex() {
    "use strict";
    
    var html, homeContent, data;
    
    homeContent = createLinks();

    if (!homeContent) {
        return false;
    }    
    
    data = {
        blog: {
            title: config.blog.name,
            baseUrl: config.blog.baseUrl,
            description: config.blog.description
        },
        author: {
            autobio: config.author.autobio,
            email: config.author.email,
            website: config.author.website,
            name: config.author.name,
            rss: config.author.rss,
            googlePage: config.author.googlePage,
            facbookPage: config.author.facbookPage,
            twitterHandle: config.author.twitterHandle,
            avatar: config.author.avatar
        },
        post: {
            content: homeContent
        }
    };
    
    html = compileTemplate('index.ejs', data);
    
    return html;  
}




/*
    This function first checks if the html file doesn't exist, 
    then checks if the md file has been modified, 
    then writes the file to disk if one of the conditions is true.
    
    @param: (String) filename - name html file to be created
    @param: (HTML String) html - contents of the file
*/
function writeHtmlFile(filename, html) {
    "use strict";
    
    if (fs.existsSync('./posts/' + filename + '.html')) {
        var htmlStats = fs.statSync('./posts/' + filename + '.html'),
            mdStats = fs.statSync('./posts/' + filename + '.md');
             
        if (mdStats.mtime.getTime() < htmlStats.mtime.getTime()) {
            return;
        } 
    }
    
    fs.writeFileSync('./posts/' + filename + '.html', html, 'utf8');
    console.log(filename + '.html' + ' created!');
}



/*
   Action function
*/
function compile() {
    "use strict";

    fs.writeFileSync('./posts/index.html', createIndex(), 'utf8');
    console.log('Home page created!');
    
    postsArray.forEach(function (file) {
        var html = createPost(file.filename);
        writeHtmlFile(file.filename, html);
    });
}


/*
  Start compiling
*/
compile();

